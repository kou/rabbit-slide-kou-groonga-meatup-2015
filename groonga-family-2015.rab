= Groonga族2015

: author
   須藤功平
: institution
   株式会社クリアコード
: content-source
   Groonga Meatup 2015
: date
   2015-11-29
: allotted-time
   30m
: theme
   .

= 内容

  * Groonga族の概要
  * Groonga族の最新情報
  * Groonga族の今後の情報

= Groonga族

総称

= Groonga族

  * ((*Groongaそのもの*))
  * Groongaと他のプロダクトを\n
    ((*つなぐプロダクト*))
  * ((*名前がXroonga*))

= つなぐプロダクト

  # image
  # src = images/groonga-family-glue.svg
  # relative_width = 110

(('note:ポイント'))\n
(('note:Groongaはライブラリーとして他のプロダクトに埋め込める！'))

= Groonga族：Groonga

  # image
  # src = images/groonga-logo.svg
  # relative_width = 100

(('tag:center'))
ぐるんが

= Groongaのよいところ1

高速な\n
全文検索機能\n
(('note:（全文検索エンジンなので当然）'))

= Groongaのよいところ2

即時更新

= 即時更新

  * 更新→すぐに検索可能
    * 思想：新鮮なデータは高価値
    * 新しいデータはすぐに入れて！
  * 工夫：更新中も検索性能キープ
    * 即時データ投入を妨げる理由を減少
    * 実装：参照ロックフリー

= 性能の傾向

  # image
  # src = images/groonga-performance-characteristic.svg
  # relative_width = 100

= Groongaのよいところ3

高速な集計処理

= 高速な集計処理

  * 集計処理
    * 同一カラムの値を一気にアクセス
  * 工夫：↑向けデータ構造を採用
    * 高速な集計処理を実現
    * 実装：カラムストア

= カラムストア

  # image
  # src = images/groonga-column-store.svg
  # relative_width = 100

= Groongaのよいところ3

手厚い\n
日本語サポート

= サポート例：RKサーチ

(('tag:center'))
ローマ字でカナを検索\n
(('note:Romaji to Kana prefix search'))

  * 例：「ya」→「ヤキニク」
    * 「や」・「ヤ」→「ヤキニク」も可
  * 用意するもの
    * カタカナでのヨミガナだけ\n
      (('note:（ひらがな・ローマ字はいらない）'))\n
      (('note:（ローマ字の訓令式・ヘボン式の差はGroongaが吸収）'))

= RKサーチの利用例1

(('tag:center'))
(('tag:margin-bottom'))
入力補助

  * 例：タグの入力\n
    (('note:同じことに違うタグをつけると検索精度があがらない'))\n
    (('note:全体で一貫性があることは重要'))\n
    (('note:既存のタグを入力補助することで同じことに同じタグをつけやすくする'))
  * 使い所：妥当な値の集合がある
    * タグ入力なら既存タグ

= RKサーチの利用例2

(('tag:center'))
(('tag:margin-bottom'))
検索ボックスでの補完

 * Googleもやっているやつ
 * ぐるなびはGroongaで実現

= ぐるなびでの利用例

  # image
  # src = images/gnavi-complete.png
  # relative_height = 85

(('tag:center'))
(('note:「yu」→「ユウラクチョウ」→「有楽町」'))

= 補完の使い方1

(('tag:center'))
スキーマ作成

  % groonga-suggest-create-dataset \
      DB_PATH stations

= 補完の使い方2

(('tag:center'))
データ準備

  # coderay json

  [
    {
      "_key": "有楽町",
       "kana": ["ユウラクチョウ"],
       "boost": 100
    }
  ]

(('tag:center'))
(('note:boostを100以上にすること'))

= 補完の使い方3

(('tag:center'))
データロード

  % curl \
      'localhost:10041/d/load?table=item_stations' \
      --header 'Content-Type: application/json' \
      --data-binary @stations.json

(('note:curlを使うときは--dataではなく--data-binaryを使うこと'))\n
(('note:--dataは改行を削除するため'))

= 補完の使い方4

(('tag:center'))
補完

  % curl \
     'localhost:10041/d/suggest' \
     --get \
     --data-urlencode 'types=complete' \
     --data-urlencode 'table=item_stations' \
     --data-urlencode 'column=kana' \
     --data-urlencode 'query=yu'
  [
    [...],
    {"complete": [[1],[...],["有楽町",101]]}
  ]

= Groongaのよいところ4

組み込める

= 組み込める

  * ライブラリーとして利用可能
    * ＝インターフェイスを変えられる
    * ＝使いやすい方法で使える

= つなぐプロダクト

  # image
  # src = images/groonga-family-glue.svg
  # relative_width = 110

(('note:ポイント'))\n
(('note:Groongaはライブラリーとして他のプロダクトに埋め込める！'))

= Groonga族：Mroonga

  # image
  # src = images/mroonga-logo.svg
  # relative_width = 100

(('tag:center'))
むるんが\n
((*M*))ySQL + G((*roonga*))

= Mroongaのよいところ1

簡単に使える

= 簡単

  * SQLで使える
  * 全文検索の知識なしで\n
    使い始められる

= Mroongaを使う：スキーマ

  # coderay sql
  CREATE TABLE table (
    column TEXT,
    FULLTEXT INDEX (column)
    -- ↑と↓を追加
  ) ENGINE=Mroonga
    DEFAULT CHARSET=utf8mb4;

(('tag:center'))
(('note:ポイント：全文検索の索引を作ると言っているだけ'))

= Mroongaを使う：検索

  # coderay sql
  SELECT * FROM table
    WHERE
      MATCH(column)
      AGAINST('*D+ キーワード1 キーワード2'
              IN BOOLEAN MODE);

(('tag:center'))
(('note:ポイント：Web検索エンジンと同様にクエリーを書ける'))

= なぜ知識なしで使えるの？

適切な\n
デフォルト値

= デフォルト値

  * トークナイザー：可変長Bigram\n
    (('note:（トークナイザー≒検索キーワード抽出モジュール）'))
    * 日本語+英語でもいい感じに動く
  * ノーマライザー：MySQL互換\n
    (('note:（ノーマライザー≒テキスト正規化モジュール）'))
    * 一部非互換：🍣≠🍺

= Mroongaのよいところ2

MySQLの機能を\n
使える

= MySQLの機能

  * レプリケーション
  * ユーザー管理
  * クライアントライブラリー
  * ...

= Mroongaのよいところ3

速い！

= 例：MySQL 5.7と比較

(('tag:center'))
(('note:ポイント：MySQL 5.7のInnoDBは日本語全文検索対応！'))

  # RT

  クエリー, 文字数, InnoDB\nmecab, InnoDB\n2gram, Mroonga\nbigram

  COUNT, 1, (('2.62s')), N/A, ((*0.74s*))
  COUNT, 2, ((*0.07s*)), (('1.74s')), (('0.27s'))
  ORDER BY, 1, (('2.78s')), N/A, ((*0.83s*))
  ORDER BY, 2, ((*0.09s*)), (('2.72s')), (('0.31s'))

(('tag:center'))
(('note:出典：MySQLの全文検索に関するあれやこれや by yoku0825'))\n
(('note:http://www.slideshare.net/yoku0825/mysql-47364986'))

  * InnoDB mecabは遅いことがある
  * Mroongaは安定して速い

= MySQL 5.7で日本語全文検索

  # coderay sql
  CREATE TABLE table (
    column TEXT,
    FULLTEXT INDEX (column)
      WITH PARSER mecab -- ←がポイント
  ) ENGINE=InnoDB
    DEFAULT CHARSET=utf8mb4;

(('tag:center'))
(('note:mecabの代わりにngramも指定できるが実用的ではなさそう'))\n
(('note:mecabを使い場合は↑の他にMeCabの設定が必要'))\n
(('note:https://dev.mysql.com/doc/refman/5.7/en/fulltext-search-mecab.html'))

= Mroonga vs MySQL 5.7

  * Mroonga
    * デフォルトでいい感じに動く\n
      (('note:（選びたければ指定できる）'))
    * 安定して速い
  * MySQL 5.7 InnoDB
    * パーサーを選ばないといけない\n
      (('note:（mecab?ngram?違いは？）'))
    * 遅いこともある

= Mroongaが速い理由：1

Groonga直結\n
↓\n
Groongaが速いと\n
Mroongaも速い

= Mroongaが速い理由：2

(({ORDER BY LIMIT}))を最適化

= (({ORDER BY LIMIT}))最適化

  # coderay sql
  SELECT * FROM table
    WHERE MATCH(column1)
          AGAINST('...' IN BOOLEAN MODE)
    ORDER BY column2
    LIMIT 10;

(('tag:center'))
MySQLに先頭10件しか返さない\n
(('note:ORDER BY LIMITをMySQLが処理するより'))\n
(('note:Groongaが処理する方が速いので速くなる'))

= (({ORDER BY LIMIT}))最適化！

  # coderay sql
  SELECT * FROM table
    WHERE MATCH(column1)
          AGAINST('...' IN BOOLEAN MODE)
      AND column3 < 100 -- 追加
    ORDER BY column2
    LIMIT 10;

(('tag:center'))
Groonga:(({MATCH AGAINST}))以外も処理\n
(('note:MySQLが処理するよりGroongaが処理する方が速いので速くなる'))

= Mroongaが速い理由：3

必要なカラム\n
((*のみ*))\n
アクセス

= 必要なカラムのみアクセス

  # coderay sql
  SELECT c1, c3, c5 FROM table;

(('tag:center'))
(({c2})), (({c4}))にはアクセスしない\n
→I/Oが減って速い

= Groongaはカラムストア

(('tag:center'))
(('note:必要なカラムのみアクセスできる理由'))

  # image
  # src = images/groonga-column-store.svg
  # relative_width = 100

= Groonga族：PGroonga

  # image
  # src = images/pgroonga-logo.svg
  # relative_width = 100

(('tag:center'))
ぴーじーるんが\n
((*P*))ost((*g*))reSQL + ((*Groonga*))

= PGroongaのよいところ1

簡単に使える

= 簡単

  * SQLで使える
  * 全文検索の知識なしで\n
    使い始められる

= PGroongaを使う：索引

  # coderay sql
  CREATE INDEX name ON table
    USING pgroonga (column);

(('tag:center'))
(('note:ポイント：全文検索の索引を作ると言っているだけ'))

= PGroongaを使う：検索

  # coderay sql
  SELECT * FROM table
    WHERE
      column @@ 'キーワード1 キーワード2';

(('tag:center'))
(('note:ポイント：Web検索エンジンと同様にクエリーを書ける'))

= なぜ知識なしで使えるの？

適切な\n
デフォルト値

= デフォルト値

  * トークナイザー：可変長Bigram\n
    (('note:（トークナイザー≒検索キーワード抽出モジュール）'))
    * 日本語+英語でもいい感じに動く
  * ノーマライザー：NFKC\n
    (('note:（ノーマライザー≒テキスト正規化モジュール）'))
    * Unicode正規化形式の1つ

= PGroongaのよいところ2

PostgreSQLの\n
機能を使える

= PostgreSQLの機能

  * トランザクション
  * ユーザー管理
  * クライアントライブラリー
  * ...

= PGroongaのよいところ3

速い！

= 例：pg_bigmと比較

(('tag:center'))
(('note:ポイント：PostgreSQL標準では日本語全文検索非対応'))

  # RT
  delimiter = [|]

  ヒット数 | PGroonga | pg_bigm

  368 | ((*0.030s*)) | (('0.107s'))
  17,172 | ((*0.121s*)) | (('1.224s'))
  22,885 | ((*0.179s*)) | (('2.472s'))
  625,792(*) | (('0.646s')) | ((*0.556s*))

(('note:データ：Wikipedia日本語版'))\n
(('note:約184万レコード・平均サイズ約3.8KB'))\n
(('note:詳細：http://www.clear-code.com/blog/2015/5/25.html'))

(('note:(*) 他は検索語が3文字以上でこれだけ2文字'))

(('tag:center'))
PGroongaは安定して速い！

= 更新中も性能維持

  # image
  # src = images/groonga-performance-characteristic.svg
  # relative_width = 100

= GINと更新と参照

  # image
  # src = images/read-while-write-gin.svg
  # relative_height = 95

(('tag:center'))
(('note:GINはpg_bigmが使っているPostgreSQL標準の転置索引実装'))

= PGroongaと更新と参照

  # image
  # src = images/read-while-write-pgroonga.svg
  # relative_height = 95

(('tag:center'))
(('note:PGroongaはGroongaを使っているので参照ロックフリー'))

= ロード時間も速い

  # RT
  delimiter = [|]

  元データの\nロード時間 | 索引\n作成時間\nPGroonga | 索引\n作成時間\npg_bigm

  16分31秒 | 25分37秒 | 5時間56分15秒

(('note:データ：Wikipedia日本語版'))\n
(('note:約184万レコード・平均サイズ約3.8KB'))\n
(('note:詳細：http://www.clear-code.com/blog/2015/5/25.html'))

(('tag:center'))
pg_bigmより約14倍速い！

= Groonga族：Rroonga

  # image
  # src = images/rroonga-logo.svg
  # relative_width = 100

(('tag:center'))
るるんが\n
((*R*))uby + ((*Groonga*))

= Rroongaのよいところ1

...

= Groonga族：Droonga

  # image
  # src = images/droonga-logo.svg
  # relative_width = 100

(('tag:center'))
どゅるんが\n
((*D*))istributed ((*Groonga*))\n
(('note:分散対応Groonga'))

= Droongaのよいところ1

分散機能

= 分散機能

  * レプリケーション
    * 実装済み
    * ダウンタイムなしでノード追加可能
  * シャーディング
    * 実装予定

= 最新情報

= Groonga: 1

groonga-httpdを\n
正式機能に

= groonga-httpd

  * nginxにGroongaを組み込み
    * Groonga族
    * nginxのモジュールとして実装
  * Groonga HTTPサーバー互換
  * ↑より高機能(('note:（HTTPサーバーとして）'))
    * 認証・TLS・HTTP/2

= Groonga: 2

Windowsでの\n
DBサイズ減少\n
(('note:（1/3以下になるケースもあり）'))

= Groonga: 3

ドリルダウンの\n
高機能化

= ドリルダウンの高機能化

  * 既存の集計処理：カウントのみ
    * 追加：合計・最小値・最大値・平均
  * 利用例
    * ...

= 今後

= Groonga

  * カラムストアをもっと活かす
    * grn_ts（ぐるんたす）
